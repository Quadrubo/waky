#!/command/with-contenv bash

# Exit on error
set -e

echo ""
echo "üêá  Configuring Template..."
echo ""

# Fix permissions
echo "üîí  Fixing app path file permissions..."
chmod -R 755 /config
chown -R webuser:webgroup /config
chown -R webuser:webgroup $WEBUSER_HOME
echo "‚úÖ  Permissions fixed."
echo ""

if [ ${DB_CONNECTION:="sqlite"} = "sqlite" ]; then
    # Check for database
    if [ ! -f /config/database.sqlite ]; then
        echo "üôÑ  SQLite database not found, creating..."
        s6-setuidgid webuser touch /config/database.sqlite
        echo "‚úÖ  SQLite database created."
    else
        echo "‚úÖ  Database already exists."
    fi
    echo ""

    # create symlinks
    echo "üîó  Creating database symlink..."
    symlinks=( \
    /var/www/html/database/database.sqlite \
    )

    for i in "${symlinks[@]}"
    do
        if [[ -e "$i" && ! -L "$i" ]]; then
            rm -rf "$i"
        fi
        if [[ ! -L "$i" ]]; then
            ln -s /config/"$(basename "$i")" "$i"
        fi
    done

    echo "‚úÖ  Database symlink created."
    echo ""
fi

# Check for env file
if [ ! -f /config/.env ]; then
    echo "üôÑ  Environment file not found, creating..."
    s6-setuidgid webuser cp $WEBUSER_HOME/.env.prod.example /config/.env
    echo "‚úÖ  Environment file created."
else
    echo "‚úÖ  Environment file exists."
fi

echo ""

# create symlinks
echo "üîó  Creating symlinks for config and log files..."
symlinks=( \
/var/www/html/.env \
/var/www/html/storage/logs/laravel.log
)

for i in "${symlinks[@]}"
do
    if [[ -e "$i" && ! -L "$i" ]]; then
        rm -rf "$i"
    fi
    if [[ ! -L "$i" ]]; then
        ln -s /config/"$(basename "$i")" "$i"
    fi
done

echo "‚úÖ  Symlinks created."
echo ""

# Check for app key
if grep -E "^APP_KEY=[^0-9A-Za-z:+\/=]{1,}" $WEBUSER_HOME/.env > /dev/null; then
    echo "‚úÖ  App key exists"
else
    echo "‚è≥  Generating app key..."
    s6-setuidgid webuser php $WEBUSER_HOME/artisan key:generate --no-ansi -q
    echo "‚úÖ  App key generated."
fi

echo ""

# create storage symlink
echo "üîê  Linking the storage..."
s6-setuidgid webuser php $WEBUSER_HOME/artisan storage:link --no-ansi -q
echo "‚úÖ  Storage linked."
echo ""

# Build cache
echo "üí∞  Building the cache..."
s6-setuidgid webuser php $WEBUSER_HOME/artisan config:cache --no-ansi -q
s6-setuidgid webuser php $WEBUSER_HOME/artisan route:cache --no-ansi -q
s6-setuidgid webuser php $WEBUSER_HOME/artisan view:cache --no-ansi -q
echo "‚úÖ  Cache set."
echo ""

# Migrate database
echo "üöõ  Migrating the database..."
s6-setuidgid webuser php $WEBUSER_HOME/artisan migrate --force --no-ansi -q
echo "‚úÖ  Database migrated."
echo ""

# Seed admin user
echo "üöõ  Creating the admin user..."
s6-setuidgid webuser php $WEBUSER_HOME/artisan db:seed --force --no-ansi -q
s6-setuidgid webuser php $WEBUSER_HOME/artisan db:seed --class FirstAdminUserSeeder --force --no-ansi -q
echo "‚úÖ Admin user created."
echo ""

# Replace ports. Needed as the project is running in network_mode: host which doesn't support mapping ports.
# The nginx files have to be modified manually.
#
# Creates:
# - http.conf.bak      https.conf.bak      (Original files)
# - http.conf.template https.conf.template (Files with port variables to replace)
# - http.conf          https.conf          (Files used by the webserver, recreated each start)
echo "Replacing ports..."

if [ ! -f "/etc/nginx/site-opts.d/http.conf.bak" ] || [ ! -f "/etc/nginx/site-opts.d/http.conf.template" ]; then
    cp /etc/nginx/site-opts.d/http.conf /etc/nginx/site-opts.d/http.conf.bak
    cp /etc/nginx/site-opts.d/http.conf /etc/nginx/site-opts.d/http.conf.template

    # Replace the port "80" with "${HTTP_PORT}" in the file
    sed -i 's/listen 80 default_server;/listen ${HTTP_PORT} default_server;/' /etc/nginx/site-opts.d/http.conf.template
    sed -i 's/listen \[::\]:80 default_server;/listen [::]:${HTTP_PORT} default_server;/' /etc/nginx/site-opts.d/http.conf.template
fi

if [ ! -f "/etc/nginx/site-opts.d/https.conf.bak" ] || [ ! -f "/etc/nginx/site-opts.d/https.conf.template" ]; then
    cp /etc/nginx/site-opts.d/https.conf /etc/nginx/site-opts.d/https.conf.bak
    cp /etc/nginx/site-opts.d/https.conf /etc/nginx/site-opts.d/https.conf.template

    # Replace the port "443" with "${HTTPS_PORT}" in the file
    sed -i 's/listen 443 http2 ssl default_server;/listen ${HTTPS_PORT} http2 ssl default_server;/' /etc/nginx/site-opts.d/https.conf.template
    sed -i 's/listen \[::\]:443 http2 ssl default_server;/listen [::]:${HTTPS_PORT} http2 ssl default_server;/' /etc/nginx/site-opts.d/https.conf.template
fi

if [[ -z "$HTTP_PORT" ]]; then
    echo "No overridden HTTP port found. Using default config."

    cp /etc/nginx/site-opts.d/http.conf.bak /etc/nginx/site-opts.d/http.conf
else 
    echo "Replacing HTTP Port with $HTTP_PORT"

    envsubst '$$HTTP_PORT' < /etc/nginx/site-opts.d/http.conf.template > /etc/nginx/site-opts.d/http.conf
fi

if [[ -z "$HTTPS_PORT" ]]; then
    echo "No overridden HTTPS port found. Using default config."

    cp /etc/nginx/site-opts.d/https.conf.bak /etc/nginx/site-opts.d/https.conf
else 
    echo "Replacing HTTPS Port with $HTTPS_PORT"

    envsubst '$$HTTPS_PORT' < /etc/nginx/site-opts.d/https.conf.template > /etc/nginx/site-opts.d/https.conf
fi

echo "‚úÖ Ports replaced."
echo ""

# App install done, show a message
echo "‚úÖ  All set, Template started."
echo ""
